class InventoryManager {\n    constructor() {\n        this.inventory = [];\n        this.filteredInventory = [];\n        this.currentView = 'table';\n        this.sessionId = localStorage.getItem('warehouse-session');\n        \n        this.elements = {\n            // Search and filters\n            inventorySearch: document.getElementById('inventory-search'),\n            stockLevelFilter: document.getElementById('stock-level-filter'),\n            locationFilter: document.getElementById('location-filter'),\n            supplierFilter: document.getElementById('supplier-filter'),\n            \n            // Statistics\n            totalItemsCount: document.getElementById('total-items-count'),\n            lowStockCount: document.getElementById('low-stock-count'),\n            reorderNeededCount: document.getElementById('reorder-needed-count'),\n            totalInventoryValue: document.getElementById('total-inventory-value'),\n            \n            // Views\n            inventoryTableView: document.getElementById('inventory-table-view'),\n            inventoryCardsView: document.getElementById('inventory-cards-view'),\n            inventoryTable: document.getElementById('inventory-table'),\n            inventoryTableBody: document.getElementById('inventory-table-body'),\n            inventoryCardsGrid: document.getElementById('inventory-cards-grid'),\n            inventoryLoading: document.getElementById('inventory-loading'),\n            \n            // Buttons\n            addItemBtn: document.getElementById('add-item-btn'),\n            exportInventory: document.getElementById('export-inventory'),\n            cycleCountBtn: document.getElementById('cycle-count-btn'),\n            viewBtns: document.querySelectorAll('.view-btn'),\n            \n            // Modals\n            itemModal: document.getElementById('item-modal'),\n            itemModalOverlay: document.getElementById('item-modal-overlay'),\n            modalItemContent: document.getElementById('modal-item-content'),\n            closeItemModal: document.getElementById('close-item-modal'),\n            \n            addItemModal: document.getElementById('add-item-modal'),\n            addItemModalOverlay: document.getElementById('add-item-modal-overlay'),\n            addItemForm: document.getElementById('add-item-form'),\n            closeAddItemModal: document.getElementById('close-add-item-modal'),\n            \n            stockAdjustmentModal: document.getElementById('stock-adjustment-modal'),\n            stockAdjustmentModalOverlay: document.getElementById('stock-adjustment-modal-overlay'),\n            stockAdjustmentForm: document.getElementById('stock-adjustment-form'),\n            closeStockAdjustmentModal: document.getElementById('close-stock-adjustment-modal'),\n            currentStockDisplay: document.getElementById('current-stock-display'),\n            newStockPreview: document.getElementById('new-stock-preview'),\n            adjustmentQuantity: document.getElementById('adjustment-quantity'),\n            adjustmentType: document.getElementById('adjustment-type'),\n            \n            cycleCountModal: document.getElementById('cycle-count-modal'),\n            cycleCountModalOverlay: document.getElementById('cycle-count-modal-overlay'),\n            closeCycleCountModal: document.getElementById('close-cycle-count-modal'),\n            startCycleCount: document.getElementById('start-cycle-count')\n        };\n        \n        this.currentAdjustmentItem = null;\n        \n        this.init();\n    }\n    \n    async init() {\n        if (!this.sessionId) {\n            window.location.href = '/applications/warehouse/login';\n            return;\n        }\n        \n        this.bindEvents();\n        await this.loadInventory();\n    }\n    \n    bindEvents() {\n        // Search\n        this.elements.inventorySearch?.addEventListener('input', (e) => {\n            this.handleSearch(e.target.value);\n        });\n        \n        // Filters\n        this.elements.stockLevelFilter?.addEventListener('change', () => this.applyFilters());\n        this.elements.locationFilter?.addEventListener('input', () => this.applyFilters());\n        this.elements.supplierFilter?.addEventListener('change', () => this.applyFilters());\n        \n        // View toggle\n        this.elements.viewBtns?.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const view = e.target.dataset.view;\n                this.switchView(view);\n            });\n        });\n        \n        // Buttons\n        this.elements.addItemBtn?.addEventListener('click', () => {\n            this.showAddItemModal();\n        });\n        \n        this.elements.exportInventory?.addEventListener('click', () => {\n            this.exportInventoryData();\n        });\n        \n        this.elements.cycleCountBtn?.addEventListener('click', () => {\n            this.showCycleCountModal();\n        });\n        \n        // Modal closes\n        this.elements.closeItemModal?.addEventListener('click', () => {\n            this.hideItemModal();\n        });\n        \n        this.elements.closeAddItemModal?.addEventListener('click', () => {\n            this.hideAddItemModal();\n        });\n        \n        this.elements.closeStockAdjustmentModal?.addEventListener('click', () => {\n            this.hideStockAdjustmentModal();\n        });\n        \n        this.elements.closeCycleCountModal?.addEventListener('click', () => {\n            this.hideCycleCountModal();\n        });\n        \n        // Modal overlays\n        this.elements.itemModalOverlay?.addEventListener('click', () => {\n            this.hideItemModal();\n        });\n        \n        this.elements.addItemModalOverlay?.addEventListener('click', () => {\n            this.hideAddItemModal();\n        });\n        \n        this.elements.stockAdjustmentModalOverlay?.addEventListener('click', () => {\n            this.hideStockAdjustmentModal();\n        });\n        \n        this.elements.cycleCountModalOverlay?.addEventListener('click', () => {\n            this.hideCycleCountModal();\n        });\n        \n        // Forms\n        this.elements.addItemForm?.addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.addNewItem();\n        });\n        \n        this.elements.stockAdjustmentForm?.addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.processStockAdjustment();\n        });\n        \n        // Stock adjustment preview\n        this.elements.adjustmentQuantity?.addEventListener('input', () => {\n            this.updateStockPreview();\n        });\n        \n        this.elements.adjustmentType?.addEventListener('change', () => {\n            this.updateStockPreview();\n        });\n        \n        // Cycle count\n        this.elements.startCycleCount?.addEventListener('click', () => {\n            this.startCycleCount();\n        });\n    }\n    \n    async loadInventory() {\n        try {\n            this.elements.inventoryLoading.style.display = 'block';\n            this.elements.inventoryTable.style.display = 'none';\n            \n            const response = await fetch('/applications/warehouse/api/inventory', {\n                headers: {\n                    'x-session-id': this.sessionId\n                }\n            });\n            \n            if (response.ok) {\n                this.inventory = await response.json();\n                this.filteredInventory = [...this.inventory];\n                this.populateFilterOptions();\n                this.updateDisplay();\n            } else {\n                throw new Error('Failed to load inventory');\n            }\n        } catch (error) {\n            console.error('Error loading inventory:', error);\n            this.showError('Failed to load inventory');\n        } finally {\n            this.elements.inventoryLoading.style.display = 'none';\n            this.elements.inventoryTable.style.display = 'block';\n        }\n    }\n    \n    populateFilterOptions() {\n        // Populate supplier filter\n        const suppliers = [...new Set(this.inventory.map(item => item.supplierInfo?.name).filter(Boolean))];\n        \n        if (this.elements.supplierFilter) {\n            this.elements.supplierFilter.innerHTML = '<option value=\"\">All Suppliers</option>';\n            suppliers.forEach(supplier => {\n                const option = document.createElement('option');\n                option.value = supplier;\n                option.textContent = supplier;\n                this.elements.supplierFilter.appendChild(option);\n            });\n        }\n    }\n    \n    updateDisplay() {\n        this.updateStatistics();\n        if (this.currentView === 'table') {\n            this.renderTableView();\n        } else {\n            this.renderCardsView();\n        }\n    }\n    \n    updateStatistics() {\n        const stats = this.calculateStatistics();\n        \n        this.updateElement(this.elements.totalItemsCount, stats.totalItems);\n        this.updateElement(this.elements.lowStockCount, stats.lowStockItems);\n        this.updateElement(this.elements.reorderNeededCount, stats.reorderNeeded);\n        this.updateElement(this.elements.totalInventoryValue, `$${this.formatNumber(stats.totalValue)}`);\n    }\n    \n    calculateStatistics() {\n        return this.inventory.reduce((stats, item) => {\n            stats.totalItems++;\n            \n            if (item.stockLevel === 'low') {\n                stats.lowStockItems++;\n            }\n            \n            if (item.stock <= item.reorderPoint) {\n                stats.reorderNeeded++;\n            }\n            \n            stats.totalValue += item.stock * (item.unitPrice || 10); // Mock unit price\n            \n            return stats;\n        }, { totalItems: 0, lowStockItems: 0, reorderNeeded: 0, totalValue: 0 });\n    }\n    \n    renderTableView() {\n        this.elements.inventoryTableBody.innerHTML = '';\n        \n        this.filteredInventory.forEach(item => {\n            const row = this.createTableRow(item);\n            this.elements.inventoryTableBody.appendChild(row);\n        });\n    }\n    \n    createTableRow(item) {\n        const row = document.createElement('div');\n        row.className = 'table-row';\n        \n        const lastUpdated = new Date(item.lastUpdated).toLocaleDateString();\n        const stockLevelClass = `stock-${item.stockLevel}`;\n        \n        row.innerHTML = `\n            <div class=\"table-cell\" data-label=\"SKU\">${item.sku}</div>\n            <div class=\"table-cell\" data-label=\"Name\">${item.name}</div>\n            <div class=\"table-cell\" data-label=\"Location\">${item.location}</div>\n            <div class=\"table-cell\" data-label=\"Stock\">\n                <span class=\"stock-number\">${item.stock}</span>\n            </div>\n            <div class=\"table-cell\" data-label=\"Level\">\n                <div class=\"stock-level ${stockLevelClass}\">\n                    <div class=\"stock-indicator\"></div>\n                    <span>${item.stockLevel}</span>\n                </div>\n            </div>\n            <div class=\"table-cell\" data-label=\"Reorder Point\">${item.reorderPoint}</div>\n            <div class=\"table-cell\" data-label=\"Supplier\">${item.supplierInfo?.name || 'N/A'}</div>\n            <div class=\"table-cell\" data-label=\"Last Updated\">${lastUpdated}</div>\n            <div class=\"table-cell\" data-label=\"Actions\">\n                <button class=\"btn btn-sm btn-ghost\" onclick=\"inventoryManager.viewItem('${item.id}')\">\n                    <svg width=\"16\" height=\"16\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"/>\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\"/>\n                    </svg>\n                    View\n                </button>\n                <button class=\"btn btn-sm btn-ghost\" onclick=\"inventoryManager.adjustStock('${item.id}')\">\n                    <svg width=\"16\" height=\"16\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"/>\n                    </svg>\n                    Adjust\n                </button>\n            </div>\n        `;\n        \n        return row;\n    }\n    \n    renderCardsView() {\n        this.elements.inventoryCardsGrid.innerHTML = '';\n        \n        this.filteredInventory.forEach(item => {\n            const card = this.createInventoryCard(item);\n            this.elements.inventoryCardsGrid.appendChild(card);\n        });\n    }\n    \n    createInventoryCard(item) {\n        const card = document.createElement('div');\n        card.className = 'inventory-card';\n        \n        const stockLevelClass = `stock-${item.stockLevel}`;\n        const needsReorder = item.stock <= item.reorderPoint;\n        \n        card.innerHTML = `\n            <div class=\"inventory-card-header\">\n                <div class=\"item-info\">\n                    <h3>${item.name}</h3>\n                    <div class=\"sku\">${item.sku}</div>\n                </div>\n                <div class=\"stock-display\">\n                    <div class=\"stock-number\">${item.stock}</div>\n                    <div class=\"stock-location\">${item.location}</div>\n                </div>\n            </div>\n            <div class=\"item-details\">\n                <p>${item.description || 'No description available'}</p>\n                <div class=\"stock-level ${stockLevelClass}\">\n                    <div class=\"stock-indicator\"></div>\n                    <span>${item.stockLevel} stock</span>\n                    ${needsReorder ? '<span class=\"reorder-warning\">⚠️ Reorder needed</span>' : ''}\n                </div>\n            </div>\n        `;\n        \n        card.addEventListener('click', () => this.viewItem(item.id));\n        \n        return card;\n    }\n    \n    switchView(view) {\n        this.currentView = view;\n        \n        // Update button states\n        this.elements.viewBtns.forEach(btn => {\n            btn.classList.toggle('active', btn.dataset.view === view);\n        });\n        \n        // Toggle views\n        this.elements.inventoryTableView?.classList.toggle('hidden', view !== 'table');\n        this.elements.inventoryCardsView?.classList.toggle('hidden', view !== 'cards');\n        \n        this.updateDisplay();\n    }\n    \n    applyFilters() {\n        const stockLevelFilter = this.elements.stockLevelFilter?.value;\n        const locationFilter = this.elements.locationFilter?.value.toLowerCase();\n        const supplierFilter = this.elements.supplierFilter?.value;\n        \n        this.filteredInventory = this.inventory.filter(item => {\n            const matchesStockLevel = !stockLevelFilter || item.stockLevel === stockLevelFilter;\n            const matchesLocation = !locationFilter || item.location.toLowerCase().includes(locationFilter);\n            const matchesSupplier = !supplierFilter || item.supplierInfo?.name === supplierFilter;\n            \n            return matchesStockLevel && matchesLocation && matchesSupplier;\n        });\n        \n        this.updateDisplay();\n    }\n    \n    handleSearch(query) {\n        if (!query) {\n            this.filteredInventory = [...this.inventory];\n        } else {\n            this.filteredInventory = this.inventory.filter(item => \n                item.name.toLowerCase().includes(query.toLowerCase()) ||\n                item.sku.toLowerCase().includes(query.toLowerCase()) ||\n                item.location.toLowerCase().includes(query.toLowerCase())\n            );\n        }\n        \n        this.updateDisplay();\n    }\n    \n    async viewItem(itemId) {\n        try {\n            const response = await fetch(`/applications/warehouse/api/inventory/${itemId}`, {\n                headers: {\n                    'x-session-id': this.sessionId\n                }\n            });\n            \n            if (response.ok) {\n                const item = await response.json();\n                this.showItemDetails(item);\n            } else {\n                throw new Error('Failed to load item details');\n            }\n        } catch (error) {\n            console.error('Error loading item details:', error);\n            this.showError('Failed to load item details');\n        }\n    }\n    \n    showItemDetails(item) {\n        const stockLevelClass = `stock-${item.stockLevel}`;\n        const needsReorder = item.stock <= item.reorderPoint;\n        \n        document.getElementById('modal-item-title').textContent = item.name;\n        \n        this.elements.modalItemContent.innerHTML = `\n            <div class=\"item-details\">\n                <div class=\"item-header\">\n                    <div class=\"item-info\">\n                        <h3>${item.name}</h3>\n                        <div class=\"item-meta\">\n                            <span class=\"item-sku\">SKU: ${item.sku}</span>\n                            <span class=\"item-location\">Location: ${item.location}</span>\n                        </div>\n                    </div>\n                    <div class=\"stock-display\">\n                        <div class=\"stock-number\">${item.stock}</div>\n                        <div class=\"stock-level ${stockLevelClass}\">\n                            <div class=\"stock-indicator\"></div>\n                            <span>${item.stockLevel} stock</span>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"item-description\">\n                    <h4>Description</h4>\n                    <p>${item.description || 'No description available'}</p>\n                </div>\n                \n                <div class=\"item-stock-info\">\n                    <h4>Stock Information</h4>\n                    <div class=\"stock-info-grid\">\n                        <div class=\"info-item\">\n                            <label>Current Stock:</label>\n                            <span>${item.stock} units</span>\n                        </div>\n                        <div class=\"info-item\">\n                            <label>Reorder Point:</label>\n                            <span>${item.reorderPoint} units</span>\n                        </div>\n                        <div class=\"info-item\">\n                            <label>Stock Level:</label>\n                            <div class=\"stock-level ${stockLevelClass}\">\n                                <div class=\"stock-indicator\"></div>\n                                <span>${item.stockLevel}</span>\n                            </div>\n                        </div>\n                        <div class=\"info-item\">\n                            <label>Reorder Status:</label>\n                            <span class=\"${needsReorder ? 'warning' : 'success'}\">\n                                ${needsReorder ? '⚠️ Reorder needed' : '✅ Stock OK'}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"item-supplier-info\">\n                    <h4>Supplier Information</h4>\n                    <div class=\"supplier-info-grid\">\n                        <div class=\"info-item\">\n                            <label>Supplier:</label>\n                            <span>${item.supplierInfo?.name || 'Not specified'}</span>\n                        </div>\n                        <div class=\"info-item\">\n                            <label>Lead Time:</label>\n                            <span>${item.supplierInfo?.leadTime || 'Unknown'} days</span>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"item-history\">\n                    <h4>Recent Activity</h4>\n                    <p>Last updated: ${new Date(item.lastUpdated).toLocaleString()}</p>\n                </div>\n                \n                <div class=\"item-actions\">\n                    <button class=\"btn btn-primary\" onclick=\"inventoryManager.adjustStock('${item.id}')\">\n                        <svg width=\"16\" height=\"16\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"/>\n                        </svg>\n                        Adjust Stock\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        this.showItemModal();\n    }\n    \n    adjustStock(itemId) {\n        const item = this.inventory.find(i => i.id === itemId);\n        if (!item) return;\n        \n        this.currentAdjustmentItem = item;\n        this.updateElement(this.elements.currentStockDisplay, item.stock);\n        \n        // Reset form\n        this.elements.stockAdjustmentForm?.reset();\n        this.updateStockPreview();\n        \n        this.hideItemModal();\n        this.showStockAdjustmentModal();\n    }\n    \n    updateStockPreview() {\n        if (!this.currentAdjustmentItem) return;\n        \n        const currentStock = this.currentAdjustmentItem.stock;\n        const adjustmentQuantity = parseInt(this.elements.adjustmentQuantity?.value) || 0;\n        const adjustmentType = this.elements.adjustmentType?.value;\n        \n        let newStock = currentStock;\n        \n        switch (adjustmentType) {\n            case 'increase':\n                newStock = currentStock + adjustmentQuantity;\n                break;\n            case 'decrease':\n                newStock = Math.max(0, currentStock - adjustmentQuantity);\n                break;\n            case 'correction':\n                newStock = adjustmentQuantity;\n                break;\n        }\n        \n        this.updateElement(this.elements.newStockPreview, newStock);\n    }\n    \n    async processStockAdjustment() {\n        if (!this.currentAdjustmentItem) return;\n        \n        try {\n            const formData = new FormData(this.elements.stockAdjustmentForm);\n            const adjustmentQuantity = parseInt(formData.get('adjustment-quantity'));\n            const adjustmentType = formData.get('adjustment-type');\n            const reason = formData.get('adjustment-reason');\n            const notes = formData.get('adjustment-notes');\n            \n            let adjustment = 0;\n            const currentStock = this.currentAdjustmentItem.stock;\n            \n            switch (adjustmentType) {\n                case 'increase':\n                    adjustment = adjustmentQuantity;\n                    break;\n                case 'decrease':\n                    adjustment = -adjustmentQuantity;\n                    break;\n                case 'correction':\n                    adjustment = adjustmentQuantity - currentStock;\n                    break;\n            }\n            \n            const response = await fetch(`/applications/warehouse/api/inventory/${this.currentAdjustmentItem.id}/adjust`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-session-id': this.sessionId\n                },\n                body: JSON.stringify({\n                    adjustment,\n                    reason: `${reason}: ${notes}`\n                })\n            });\n            \n            if (response.ok) {\n                this.hideStockAdjustmentModal();\n                await this.loadInventory();\n                this.showSuccess('Stock adjustment completed successfully');\n            } else {\n                throw new Error('Failed to process stock adjustment');\n            }\n        } catch (error) {\n            console.error('Error processing stock adjustment:', error);\n            this.showError('Failed to process stock adjustment');\n        }\n    }\n    \n    showAddItemModal() {\n        document.getElementById('add-item-modal-title').textContent = 'Add New Item';\n        this.elements.addItemForm?.reset();\n        this.elements.addItemModal?.classList.remove('hidden');\n        this.elements.addItemModalOverlay?.classList.remove('hidden');\n    }\n    \n    async addNewItem() {\n        try {\n            const formData = new FormData(this.elements.addItemForm);\n            const itemData = {\n                sku: formData.get('item-sku'),\n                name: formData.get('item-name'),\n                location: formData.get('item-location'),\n                stock: parseInt(formData.get('item-stock')),\n                reorderPoint: parseInt(formData.get('item-reorder-point')),\n                description: formData.get('item-description'),\n                supplierInfo: {\n                    name: formData.get('item-supplier'),\n                    leadTime: parseInt(formData.get('item-lead-time')) || 7\n                },\n                stockLevel: 'high' // Will be calculated on backend\n            };\n            \n            const response = await fetch('/applications/warehouse/api/inventory', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-session-id': this.sessionId\n                },\n                body: JSON.stringify(itemData)\n            });\n            \n            if (response.ok) {\n                this.hideAddItemModal();\n                await this.loadInventory();\n                this.showSuccess('Item added successfully');\n            } else {\n                throw new Error('Failed to add item');\n            }\n        } catch (error) {\n            console.error('Error adding item:', error);\n            this.showError('Failed to add item');\n        }\n    }\n    \n    exportInventoryData() {\n        const csvContent = this.generateCSV(this.filteredInventory);\n        const blob = new Blob([csvContent], { type: 'text/csv' });\n        const url = window.URL.createObjectURL(blob);\n        \n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `inventory-export-${new Date().toISOString().split('T')[0]}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        \n        window.URL.revokeObjectURL(url);\n        \n        this.showSuccess('Inventory exported successfully');\n    }\n    \n    generateCSV(data) {\n        const headers = ['SKU', 'Name', 'Location', 'Stock', 'Stock Level', 'Reorder Point', 'Supplier', 'Last Updated'];\n        const rows = data.map(item => [\n            item.sku,\n            item.name,\n            item.location,\n            item.stock,\n            item.stockLevel,\n            item.reorderPoint,\n            item.supplierInfo?.name || '',\n            new Date(item.lastUpdated).toISOString()\n        ]);\n        \n        return [headers, ...rows].map(row => \n            row.map(field => `\"${String(field).replace(/\"/g, '\"\"')}\"`).join(',')\n        ).join('\\n');\n    }\n    \n    showCycleCountModal() {\n        this.elements.cycleCountModal?.classList.remove('hidden');\n        this.elements.cycleCountModalOverlay?.classList.remove('hidden');\n    }\n    \n    startCycleCount() {\n        // Mock cycle count functionality\n        this.hideCycleCountModal();\n        this.showSuccess('Cycle count started - this feature is under development');\n    }\n    \n    // Modal management\n    showItemModal() {\n        this.elements.itemModal?.classList.remove('hidden');\n        this.elements.itemModalOverlay?.classList.remove('hidden');\n    }\n    \n    hideItemModal() {\n        this.elements.itemModal?.classList.add('hidden');\n        this.elements.itemModalOverlay?.classList.add('hidden');\n    }\n    \n    hideAddItemModal() {\n        this.elements.addItemModal?.classList.add('hidden');\n        this.elements.addItemModalOverlay?.classList.add('hidden');\n    }\n    \n    showStockAdjustmentModal() {\n        this.elements.stockAdjustmentModal?.classList.remove('hidden');\n        this.elements.stockAdjustmentModalOverlay?.classList.remove('hidden');\n    }\n    \n    hideStockAdjustmentModal() {\n        this.elements.stockAdjustmentModal?.classList.add('hidden');\n        this.elements.stockAdjustmentModalOverlay?.classList.add('hidden');\n        this.currentAdjustmentItem = null;\n    }\n    \n    hideCycleCountModal() {\n        this.elements.cycleCountModal?.classList.add('hidden');\n        this.elements.cycleCountModalOverlay?.classList.add('hidden');\n    }\n    \n    updateElement(element, value) {\n        if (element && value !== undefined) {\n            element.textContent = value;\n        }\n    }\n    \n    formatNumber(num) {\n        if (num >= 1000000) {\n            return (num / 1000000).toFixed(1) + 'M';\n        } else if (num >= 1000) {\n            return (num / 1000).toFixed(1) + 'K';\n        }\n        return num.toLocaleString();\n    }\n    \n    showError(message) {\n        this.showNotification(message, 'error');\n    }\n    \n    showSuccess(message) {\n        this.showNotification(message, 'success');\n    }\n    \n    showNotification(message, type = 'info') {\n        const notification = document.createElement('div');\n        notification.className = `notification notification-${type}`;\n        notification.textContent = message;\n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n            notification.remove();\n        }, 5000);\n    }\n}\n\n// Initialize inventory manager\nlet inventoryManager;\ndocument.addEventListener('DOMContentLoaded', () => {\n    inventoryManager = new InventoryManager();\n});