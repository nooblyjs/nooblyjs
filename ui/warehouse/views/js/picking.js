class PickingInterface {\n    constructor() {\n        this.sessionId = localStorage.getItem('warehouse-session');\n        this.currentOrder = null;\n        this.currentItemIndex = 0;\n        this.pickingStartTime = null;\n        this.currentMode = null;\n        \n        this.elements = {\n            // Mode selection\n            pickingModeSelector: document.getElementById('picking-mode-selector'),\n            singleOrderMode: document.getElementById('single-order-mode'),\n            batchPickingMode: document.getElementById('batch-picking-mode'),\n            wavePickingMode: document.getElementById('wave-picking-mode'),\n            \n            // Order selection\n            orderSelection: document.getElementById('order-selection'),\n            backToMode: document.getElementById('back-to-mode'),\n            pickingOrdersGrid: document.getElementById('picking-orders-grid'),\n            \n            // Active picking\n            activePicking: document.getElementById('active-picking'),\n            currentOrderId: document.getElementById('current-order-id'),\n            currentCustomer: document.getElementById('current-customer'),\n            currentPriority: document.getElementById('current-priority'),\n            \n            // Progress\n            pickingProgressFill: document.getElementById('picking-progress-fill'),\n            progressCurrent: document.getElementById('progress-current'),\n            progressTotal: document.getElementById('progress-total'),\n            \n            // Current item\n            currentItemPick: document.getElementById('current-item-pick'),\n            currentItemName: document.getElementById('current-item-name'),\n            currentItemSku: document.getElementById('current-item-sku'),\n            currentItemLocation: document.getElementById('current-item-location'),\n            currentQuantity: document.getElementById('current-quantity'),\n            \n            // Quantity controls\n            pickedQuantity: document.getElementById('picked-quantity'),\n            decreaseQuantity: document.getElementById('decrease-quantity'),\n            increaseQuantity: document.getElementById('increase-quantity'),\n            \n            // Actions\n            completePick: document.getElementById('complete-pick'),\n            shortPick: document.getElementById('short-pick'),\n            skipItem: document.getElementById('skip-item'),\n            pausePicking: document.getElementById('pause-picking'),\n            skipOrder: document.getElementById('skip-order'),\n            completeOrder: document.getElementById('complete-order'),\n            \n            // Notes\n            pickNotes: document.getElementById('pick-notes'),\n            \n            // Summary\n            pickingSummary: document.getElementById('picking-summary'),\n            summaryItemsPicked: document.getElementById('summary-items-picked'),\n            summaryShortPicks: document.getElementById('summary-short-picks'),\n            summaryTime: document.getElementById('summary-time'),\n            startNextOrder: document.getElementById('start-next-order'),\n            returnToDashboard: document.getElementById('return-to-dashboard'),\n            \n            // Modals\n            shortPickModal: document.getElementById('short-pick-modal'),\n            shortPickModalOverlay: document.getElementById('short-pick-modal-overlay'),\n            shortPickForm: document.getElementById('short-pick-form'),\n            closeShortPickModal: document.getElementById('close-short-pick-modal'),\n            shortPickReason: document.getElementById('short-pick-reason'),\n            shortPickNotes: document.getElementById('short-pick-notes')\n        };\n        \n        this.init();\n    }\n    \n    async init() {\n        if (!this.sessionId) {\n            window.location.href = '/applications/warehouse/login';\n            return;\n        }\n        \n        this.bindEvents();\n        this.showModeSelector();\n    }\n    \n    bindEvents() {\n        // Mode selection\n        this.elements.singleOrderMode?.addEventListener('click', () => {\n            this.selectMode('single');\n        });\n        \n        this.elements.batchPickingMode?.addEventListener('click', () => {\n            this.selectMode('batch');\n        });\n        \n        this.elements.wavePickingMode?.addEventListener('click', () => {\n            this.selectMode('wave');\n        });\n        \n        // Navigation\n        this.elements.backToMode?.addEventListener('click', () => {\n            this.showModeSelector();\n        });\n        \n        // Quantity controls\n        this.elements.decreaseQuantity?.addEventListener('click', () => {\n            this.adjustQuantity(-1);\n        });\n        \n        this.elements.increaseQuantity?.addEventListener('click', () => {\n            this.adjustQuantity(1);\n        });\n        \n        this.elements.pickedQuantity?.addEventListener('input', (e) => {\n            this.validateQuantityInput(e.target.value);\n        });\n        \n        // Pick actions\n        this.elements.completePick?.addEventListener('click', () => {\n            this.completePick();\n        });\n        \n        this.elements.shortPick?.addEventListener('click', () => {\n            this.showShortPickModal();\n        });\n        \n        this.elements.skipItem?.addEventListener('click', () => {\n            this.skipCurrentItem();\n        });\n        \n        // Order actions\n        this.elements.pausePicking?.addEventListener('click', () => {\n            this.pausePicking();\n        });\n        \n        this.elements.skipOrder?.addEventListener('click', () => {\n            this.skipCurrentOrder();\n        });\n        \n        this.elements.completeOrder?.addEventListener('click', () => {\n            this.completeCurrentOrder();\n        });\n        \n        // Short pick modal\n        this.elements.closeShortPickModal?.addEventListener('click', () => {\n            this.hideShortPickModal();\n        });\n        \n        this.elements.shortPickModalOverlay?.addEventListener('click', () => {\n            this.hideShortPickModal();\n        });\n        \n        this.elements.shortPickForm?.addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.processShortPick();\n        });\n        \n        // Summary actions\n        this.elements.startNextOrder?.addEventListener('click', () => {\n            this.startNextOrder();\n        });\n        \n        this.elements.returnToDashboard?.addEventListener('click', () => {\n            window.location.href = '/applications/warehouse/';\n        });\n        \n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            this.handleKeyboardShortcuts(e);\n        });\n    }\n    \n    showModeSelector() {\n        this.hideAllSections();\n        this.elements.pickingModeSelector?.classList.remove('hidden');\n    }\n    \n    async selectMode(mode) {\n        this.currentMode = mode;\n        await this.loadAvailableOrders();\n        this.showOrderSelection();\n    }\n    \n    async loadAvailableOrders() {\n        try {\n            const response = await fetch('/applications/warehouse/api/picking/orders', {\n                headers: {\n                    'x-session-id': this.sessionId\n                }\n            });\n            \n            if (response.ok) {\n                this.availableOrders = await response.json();\n                this.renderOrderSelection();\n            } else {\n                throw new Error('Failed to load available orders');\n            }\n        } catch (error) {\n            console.error('Error loading orders:', error);\n            this.showError('Failed to load available orders');\n        }\n    }\n    \n    renderOrderSelection() {\n        this.elements.pickingOrdersGrid.innerHTML = '';\n        \n        if (this.availableOrders.length === 0) {\n            this.elements.pickingOrdersGrid.innerHTML = `\n                <div class=\"empty-state\">\n                    <h3>No orders available for picking</h3>\n                    <p>All orders are currently being processed or completed.</p>\n                    <button class=\"btn btn-primary\" onclick=\"window.location.href='/applications/warehouse/'\">Return to Dashboard</button>\n                </div>\n            `;\n            return;\n        }\n        \n        this.availableOrders.forEach(order => {\n            const orderCard = this.createPickingOrderCard(order);\n            this.elements.pickingOrdersGrid.appendChild(orderCard);\n        });\n    }\n    \n    createPickingOrderCard(order) {\n        const card = document.createElement('div');\n        card.className = 'action-card';\n        \n        const priorityClass = order.priority === 'high' ? 'danger' : \n                             order.priority === 'medium' ? 'warning' : '';\n        \n        if (priorityClass) {\n            card.classList.add(priorityClass);\n        }\n        \n        card.innerHTML = `\n            <div class=\"action-icon\">\n                ${order.priority === 'high' ? 'üî•' : \n                  order.priority === 'medium' ? '‚ö°' : 'üì¶'}\n            </div>\n            <h3>Order #${order.id}</h3>\n            <p>${order.customerName}</p>\n            <p>${order.items.length} items ‚Ä¢ ${order.priority} priority</p>\n            ${order.hasShortPicks ? '<p class=\"warning\">‚ö†Ô∏è Has short picks</p>' : ''}\n        `;\n        \n        card.addEventListener('click', () => {\n            this.startPicking(order);\n        });\n        \n        return card;\n    }\n    \n    showOrderSelection() {\n        this.hideAllSections();\n        this.elements.orderSelection?.classList.remove('hidden');\n    }\n    \n    async startPicking(order) {\n        try {\n            // Mark order as being picked\n            await fetch(`/applications/warehouse/api/picking/orders/${order.id}/start`, {\n                method: 'POST',\n                headers: {\n                    'x-session-id': this.sessionId\n                }\n            });\n            \n            this.currentOrder = order;\n            this.currentItemIndex = 0;\n            this.pickingStartTime = Date.now();\n            \n            this.showActivePicking();\n            this.updatePickingDisplay();\n            \n        } catch (error) {\n            console.error('Error starting picking:', error);\n            this.showError('Failed to start picking');\n        }\n    }\n    \n    showActivePicking() {\n        this.hideAllSections();\n        this.elements.activePicking?.classList.remove('hidden');\n    }\n    \n    updatePickingDisplay() {\n        if (!this.currentOrder) return;\n        \n        // Update order info\n        this.updateElement(this.elements.currentOrderId, `Order #${this.currentOrder.id}`);\n        this.updateElement(this.elements.currentCustomer, this.currentOrder.customerName);\n        \n        const priorityClass = `priority-${this.currentOrder.priority}`;\n        if (this.elements.currentPriority) {\n            this.elements.currentPriority.className = `priority-badge ${priorityClass}`;\n            this.elements.currentPriority.textContent = `${this.currentOrder.priority} priority`;\n        }\n        \n        // Update progress\n        const completedItems = this.currentOrder.items.filter(item => item.pickStatus !== 'pending').length;\n        const totalItems = this.currentOrder.items.length;\n        const progressPercent = (completedItems / totalItems) * 100;\n        \n        if (this.elements.pickingProgressFill) {\n            this.elements.pickingProgressFill.style.width = `${progressPercent}%`;\n        }\n        \n        this.updateElement(this.elements.progressCurrent, completedItems);\n        this.updateElement(this.elements.progressTotal, totalItems);\n        \n        // Update current item\n        this.updateCurrentItemDisplay();\n        \n        // Update complete order button\n        const allItemsProcessed = this.currentOrder.items.every(item => item.pickStatus !== 'pending');\n        if (this.elements.completeOrder) {\n            this.elements.completeOrder.disabled = !allItemsProcessed;\n        }\n    }\n    \n    updateCurrentItemDisplay() {\n        const currentItem = this.getCurrentItem();\n        \n        if (!currentItem) {\n            this.elements.currentItemPick?.classList.add('hidden');\n            return;\n        }\n        \n        this.elements.currentItemPick?.classList.remove('hidden');\n        \n        this.updateElement(this.elements.currentItemName, currentItem.name);\n        this.updateElement(this.elements.currentItemSku, currentItem.sku);\n        this.updateElement(this.elements.currentItemLocation, currentItem.location);\n        this.updateElement(this.elements.currentQuantity, currentItem.quantity);\n        \n        // Reset quantity input\n        if (this.elements.pickedQuantity) {\n            this.elements.pickedQuantity.value = currentItem.quantity;\n            this.elements.pickedQuantity.max = currentItem.quantity;\n        }\n    }\n    \n    getCurrentItem() {\n        if (!this.currentOrder || this.currentItemIndex >= this.currentOrder.items.length) {\n            return null;\n        }\n        \n        // Find next unpicked item\n        for (let i = this.currentItemIndex; i < this.currentOrder.items.length; i++) {\n            if (this.currentOrder.items[i].pickStatus === 'pending') {\n                this.currentItemIndex = i;\n                return this.currentOrder.items[i];\n            }\n        }\n        \n        return null;\n    }\n    \n    adjustQuantity(delta) {\n        const input = this.elements.pickedQuantity;\n        if (!input) return;\n        \n        const currentValue = parseInt(input.value) || 0;\n        const newValue = Math.max(0, Math.min(currentValue + delta, parseInt(input.max)));\n        input.value = newValue;\n    }\n    \n    validateQuantityInput(value) {\n        const numValue = parseInt(value);\n        const maxValue = parseInt(this.elements.pickedQuantity.max);\n        \n        if (numValue > maxValue) {\n            this.elements.pickedQuantity.value = maxValue;\n        } else if (numValue < 0) {\n            this.elements.pickedQuantity.value = 0;\n        }\n    }\n    \n    async completePick() {\n        const currentItem = this.getCurrentItem();\n        if (!currentItem) return;\n        \n        const pickedQuantity = parseInt(this.elements.pickedQuantity.value) || 0;\n        const requiredQuantity = currentItem.quantity;\n        \n        try {\n            const response = await fetch(`/applications/warehouse/api/picking/orders/${this.currentOrder.id}/items/${currentItem.sku}/pick`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-session-id': this.sessionId\n                },\n                body: JSON.stringify({\n                    pickedQuantity,\n                    pickType: pickedQuantity === requiredQuantity ? 'complete' : 'partial',\n                    notes: this.elements.pickNotes.value\n                })\n            });\n            \n            if (response.ok) {\n                this.currentOrder = await response.json();\n                this.moveToNextItem();\n            } else {\n                throw new Error('Failed to complete pick');\n            }\n        } catch (error) {\n            console.error('Error completing pick:', error);\n            this.showError('Failed to complete pick');\n        }\n    }\n    \n    showShortPickModal() {\n        this.elements.shortPickModal?.classList.remove('hidden');\n        this.elements.shortPickModalOverlay?.classList.remove('hidden');\n    }\n    \n    hideShortPickModal() {\n        this.elements.shortPickModal?.classList.add('hidden');\n        this.elements.shortPickModalOverlay?.classList.add('hidden');\n        this.elements.shortPickForm?.reset();\n    }\n    \n    async processShortPick() {\n        const currentItem = this.getCurrentItem();\n        if (!currentItem) return;\n        \n        const pickedQuantity = parseInt(this.elements.pickedQuantity.value) || 0;\n        const reason = this.elements.shortPickReason.value;\n        const notes = this.elements.shortPickNotes.value;\n        \n        try {\n            const response = await fetch(`/applications/warehouse/api/picking/orders/${this.currentOrder.id}/items/${currentItem.sku}/pick`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-session-id': this.sessionId\n                },\n                body: JSON.stringify({\n                    pickedQuantity,\n                    pickType: 'short',\n                    reason,\n                    notes: `${this.elements.pickNotes.value} | Short pick reason: ${reason}. ${notes}`\n                })\n            });\n            \n            if (response.ok) {\n                this.currentOrder = await response.json();\n                this.hideShortPickModal();\n                this.moveToNextItem();\n            } else {\n                throw new Error('Failed to process short pick');\n            }\n        } catch (error) {\n            console.error('Error processing short pick:', error);\n            this.showError('Failed to process short pick');\n        }\n    }\n    \n    moveToNextItem() {\n        this.currentItemIndex++;\n        this.elements.pickNotes.value = '';\n        this.updatePickingDisplay();\n        \n        // Check if order is complete\n        const allItemsProcessed = this.currentOrder.items.every(item => item.pickStatus !== 'pending');\n        if (allItemsProcessed) {\n            this.showPickingComplete();\n        }\n    }\n    \n    skipCurrentItem() {\n        this.moveToNextItem();\n    }\n    \n    pausePicking() {\n        // Save current state and return to order selection\n        this.showOrderSelection();\n    }\n    \n    skipCurrentOrder() {\n        this.showOrderSelection();\n    }\n    \n    async completeCurrentOrder() {\n        try {\n            // Update order status to packing\n            const response = await fetch(`/applications/warehouse/api/orders/${this.currentOrder.id}/status`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-session-id': this.sessionId\n                },\n                body: JSON.stringify({ status: 'packing' })\n            });\n            \n            if (response.ok) {\n                this.showPickingComplete();\n            } else {\n                throw new Error('Failed to complete order');\n            }\n        } catch (error) {\n            console.error('Error completing order:', error);\n            this.showError('Failed to complete order');\n        }\n    }\n    \n    showPickingComplete() {\n        this.hideAllSections();\n        this.elements.pickingSummary?.classList.remove('hidden');\n        this.updateSummary();\n    }\n    \n    updateSummary() {\n        if (!this.currentOrder) return;\n        \n        const pickedItems = this.currentOrder.items.filter(item => item.pickStatus === 'picked').length;\n        const shortPicks = this.currentOrder.items.filter(item => item.pickStatus === 'short_pick').length;\n        const totalTime = this.pickingStartTime ? Date.now() - this.pickingStartTime : 0;\n        \n        this.updateElement(this.elements.summaryItemsPicked, pickedItems);\n        this.updateElement(this.elements.summaryShortPicks, shortPicks);\n        this.updateElement(this.elements.summaryTime, this.formatTime(totalTime));\n    }\n    \n    startNextOrder() {\n        this.currentOrder = null;\n        this.currentItemIndex = 0;\n        this.showOrderSelection();\n    }\n    \n    handleKeyboardShortcuts(e) {\n        // Only handle shortcuts when actively picking\n        if (!this.elements.activePicking || this.elements.activePicking.classList.contains('hidden')) {\n            return;\n        }\n        \n        switch (e.key) {\n            case 'Enter':\n                e.preventDefault();\n                this.completePick();\n                break;\n            case 'Escape':\n                e.preventDefault();\n                this.pausePicking();\n                break;\n            case '+':\n            case '=':\n                e.preventDefault();\n                this.adjustQuantity(1);\n                break;\n            case '-':\n                e.preventDefault();\n                this.adjustQuantity(-1);\n                break;\n        }\n    }\n    \n    hideAllSections() {\n        const sections = [\n            this.elements.pickingModeSelector,\n            this.elements.orderSelection,\n            this.elements.activePicking,\n            this.elements.pickingSummary\n        ];\n        \n        sections.forEach(section => {\n            section?.classList.add('hidden');\n        });\n    }\n    \n    updateElement(element, value) {\n        if (element && value !== undefined) {\n            element.textContent = value;\n        }\n    }\n    \n    formatTime(milliseconds) {\n        const minutes = Math.floor(milliseconds / 60000);\n        const seconds = Math.floor((milliseconds % 60000) / 1000);\n        return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    }\n    \n    showError(message) {\n        this.showNotification(message, 'error');\n    }\n    \n    showSuccess(message) {\n        this.showNotification(message, 'success');\n    }\n    \n    showNotification(message, type = 'info') {\n        const notification = document.createElement('div');\n        notification.className = `notification notification-${type}`;\n        notification.textContent = message;\n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n            notification.remove();\n        }, 5000);\n    }\n}\n\n// Initialize picking interface\ndocument.addEventListener('DOMContentLoaded', () => {\n    new PickingInterface();\n});